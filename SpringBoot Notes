Spring boot:
  
           It is a java frame work which is used to build web applications efficiently.

Dependency injunction:

Annotation:A type of symbol which nothing but a symbol '@'+name of annotation
           
           Annotation is mostly used to define that the method or class 
          
           performs for what? or how?.

Some types of annotations:

           @Controller-A type of annotation which is used to define that the servlet or java file that should be

                       Performed as controller.the main use of controller is to make that the requested view page
                   
                       To be visible on browser where we requested.
           
           @ResponseBody-is a type of annotation which is only used when we are return something which is not returning 

                         that the file format instead of that the method where we initialised it and the method can only
      
                         String or any other data types value except files like .jsp etc..

           @RequestMapping()-is a type of annotation which is used to map that the method where it initialised and returns 

                            what that the method actually return.In between of that braces the request name or view name 

                            to be placed then only it is ease for mapping the correct jsp file for the corresponding request.

           @RequestParam()-is type of annotation which is placed inside of service method to change the variable of user's value
        
                           To our desire variable name.to do that we just need to add user's variable request name.

Jaser jar file(tomcat jaser):
       It is a type of jar file which is used to make that the jsp file to be visible on the browser by adding it's dependency 

       on pom.xml file.so whenever we want to display our jsp file for incoming request we need to add the dependency of jaser 

       jar file on pom.xml.

MVC-Model View Controller

Model- it is nothing but a data which will come as request value from user.

View- it is a jsp or html page which will be displayed on the browser once the user requested.

Actual process:

    Client request->server->web container->searching for servlet or jsp having the request name,once it is found.->response to the client.

Controller=servlet=java file

*Controller can contains a lot of methods with unique request name.

Artifact- project name

Group id- package name

All the html or jsp files should be in src/main/webapp.

All the java or servlet should be in src-java-main/com.package.name.

Example Controller:(which is used return jsp file while the word called index is coming as a request)
       import...
       
       @Controller
       
       Public class NormalServletController{

            @RequestMapping("index")
  
            Public String index(){
     
                  return "index.jsp";

            }

        }

Now develop JSP:
       <html>

       <head>

       <title> welcome to softworks </title>

       </head>

       <body>

       //your html content to be here

       </body>

       </html>

              
Application.Properties:
          
              -It is type of file which is used for making that the controller to don't worry about 

               which format to be displayed. 

              -which is located at src\main\resources,here for making the above step to be done
               
               We just add some lines on it.

               *Servlet.mvc.view.prefix=/admin/ //here you should mention where your view is located
               *Servlet.mvc.view.suffix=.jsp

              That's it...

Handling the additional request:
               When user sends an additional queries or request with view page request 

               we need to get the value of it.for that we need to add one parameter called 'HttpServletRequest' with one object on controller or service method

               Then only we can access the value which is passed by the user as a request to the server by using
    
               String s=request.get parameter()//inside of braces add on which variable that the user store the value and send it as request

HttpSession:
     It is type of class which is mostly used for security,traffic and protect that the one user only can access their account from one device only.

     syntax-HttpSession session=request.get Session()//that request is yours object of HttpServletRequest.

     Here we need to add set attribute,usually this method is used to store that the user request value on other object for

     Maintaining the session,so that the session can remain utill this session ends.

ModelAndView:
     A type of class which is used to add both model and view on one object by creating an object for it.

     Using  obj.setViewName(//your view should be here ) which is used to set your view on ModelAndView.

     Using obj.add("//your new obj",your pojo obj) which is used to add your data's on ModelAndView then just return obj of ModelAndView

     Then only we could follow springboot concept.if you don't use MAV(this)concept it means that you are

     Against the principles of seperate of concerns.

Let's see some examples:
1.this is not based on SpringBoot concept
@Controller
Public class NormalController{
       
       @RequestMapping("index")
       Public String index(HttpRequest request){

              //your logic to be here with session and it's methods

       }

2.this is not based on SpringBoot concept
@Controller
Public class NormalController{
       
       @RequestMapping("index")
       Public String index(String name,HttpSession session){

              //your logic to be here with session methods

       }

3.this is based on SpringBoot concept
@Controller
Public class NormalController{
       
       @RequestMapping("index")
       Public ModelAndView index(//pojoclassname pojoclassobject to be here ){

              //there is no session will be included
       
              ModelAndView mvc=new ModelAndView ();

              mvc.SetViewName(//your view name without that format);

              mvc.add(//your model or pojoclass obj to be here with new obj for use of your view like-'details',pojoobj);

              return mvc;

       }

}

CRUD:CREATE READ UPDATE DELETE

Firstly for database connection with our springboot,All we need to do is adding the connection by application.properties file like the followings

   Servlet.h2.console.enabled=true
 
   Servlet.datasource.platform=h2 //not mandatory for h2 database

   Servlet.datasource.url=jdbc.h2.mem.user

And then check your db whether working or not just by entering

Tha line 'localhost:8080/h2.console,once you searched like this you will get a db page but there is no table alloted

For you to store your clients details,so to make a table for your datas you need to create a pojoclass or model for your datas which will be given by the end users

And generate getter and setter methods and then you need to add an annotations,first annotation is @Entity which is to be placed on the above of your pojoclass name

And add @Id on the above which data's to be stored in the database at your pojoclass.






