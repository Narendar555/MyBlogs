React JS:
   React JS is type of javascript framework,which is mostly used for

   Making the way of developing the website in a efficient way or easier.

How to run and create the react app on terminal:

      firstly we need to install node.js on our device then we need to go where our project to be created

      And then create a folder omn terminal by using a command like mkdir nameofthefolder and using cd foldername to go that folder

      Then using npm init-y to generate project details defaultly.And then need to get out from the existing folder and just intialize the  create react library globally by using "npm i -g install create react app unsafe...=true" and then using create-react-app project name to create react project which helps to form the entire structure

      For react project like app.js,index.js and index.html.

      Once our project is completely created then we need to go our project by using cd project name and npm start this will let you to see the content pf your project on the browser with a url:localhost:3000.


React component:

       Component is just like an elements in a website such as a menubar,navigation bar,thumbnails and buttons etc..

       Which is mainly used for making independent of elements in a website.

Main files to focus on every react JS project as a developer:

           -App.js

           -index.js

           -index.html
These are the files we need to have more focus on.

The contents in App.js will be rendered to index.js and then the content in index.js finally rendered

To index.html.this how the process will go on.

Creating a component:

      We can create a components by just writing the a JS function or defining the class.

      When we are creating a components by using function we need to add what should be display here in the components as return statement

      It should be in JSX format like Html with Javascript.

      Example:

        function Normal(props){
          
           <div class="App">
           return <h2> {props.variableName} </h2>;
           </div>

        }
This is how a function component would be look like on App.js.

Ok now see how a components creating by JS classes here:
         
       When we are going to create a components using class then we should call render() method

       And then inside of that we should write our code to display on components with the help of return statement.one more thing I would

       Like to say that is neve forget to extends React.Component when you are creating component using classes.
  
       Eg:
     
        Class class_name extends React.Component {

         render(){
     
          return //our code to be here;

         }

        }
Before creating a components we already have a root or parent component on App.js file so All components we creating 

Should be a child components of root or parent component.

To use our child components or making the relationship between our child and root component we must add our

Own components name as an HTML tag in the root component then only it will be work.

We can also create a nested component by adding one child component on another child.then add that another child component on root.

Then  it will be called as nested component.

One point to note that is we can also create our required components in separate files but we must be named it with a format is .jsx.

And then we can use it by importing that file by writing "import {here your jsx file name to be here} from './foldername/filename';

Whenever we are creating components using JS classes we need to import the statement that is " import React from 'react';.

Babel library:
        
        It is a type of library which is mainly used for compiling our jsx code into JS code the purpose why it is doing that nothing but a browser can not understand our jsx code 

        So our babel library helps to convert our jsx code to JS code.

Props:
  It is nothing but a properties,which is mainly used for passing the data's from parent component

  To child components.it doesn't modify the datas,whenever we are give a datas from parent to child we may give a lot of arguments with values from app.js why that app.js is nothing because where only your parent component is located.

  So we need to get all of the arguments with its values so we can't write a lot of parameters in child components that's why we need to use props then we can access any arguments which are passing by parent to child like "props.agruementname".

  Eg:

   App.js
   import React from 'react';
 
   import {Sample} from './components/Sample';

   function App(){

     return(

       <div className:App>
         
         <Sample name="react"></Sample>
       </div>

     )



   }

   export default App;

--------------------------------
Sample.jsx
   
   import React from 'react';

   function Sample(props){
   
     return(

       <p>{props.name}</p>
   }

   export default Sample;
Above there is no type of modifications will be done because it's props.

State:
   
    It helps to manage the data's within the components and the modifications can be done here in the state 

    It is a dynamic and it can only created on class based components and in that class it will be only written on constructor which will be given the parameter as props and inside of that constructor

    The super(props) keyword should be there and then create a state like -this.state={code to be here};

    We can change the state from intialize stage to our desired stage by using the predefined function called setState() write the function like this.setState(code to be here);

    That's it.this is how we would create a state to keep our website dynamic.
